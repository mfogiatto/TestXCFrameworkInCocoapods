// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VPartnerLib
import AVFoundation
import Combine
import Contacts
import ContactsUI
import CoreGraphics
import CoreTelephony
import FirebaseInstanceID
import Foundation
import IdtmLib
import Netverify
import Network
import OpenSSL
import PDFKit
import PhoneNumberKit
import Photos
import IdtmLib.Reachability
import ReactiveCocoa
import ReactiveSwift
import Security
import Swift
import UIKit
@_exported import VPartnerLib
import WebKit
import os
extension UIImagePickerController {
  @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func viewDidLayoutSubviews()
}
public protocol VPartnerLibrary {
  static var shared: VPartnerLibrary { get }
  func configure(designConfig: ConfigurationsDesign)
  func buildManageSubscriptionsViewController() -> UIKit.UIViewController
  func buildAddDeviceViewController(productID: Swift.String, completion: @escaping OnboardingCompletionHandler) -> UIKit.UIViewController
  func buildAddDeviceViewController(completion: @escaping OnboardingCompletionHandler) -> UIKit.UIViewController
  func requiredSetup(clientID: Swift.String, grantID: Swift.String, partnerCode: Swift.String, productCode: Swift.String, appIconName: Swift.String?, sponsorIconName: Swift.String?, locale: Swift.String?)
  func logoutUserFromIDTM(completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
public typealias OnboardingCompletionHandler = (OnboardingResponse) -> Swift.Void
public enum OnboardingResponse {
  case success
  case pending
  case fail
  public static func == (a: OnboardingResponse, b: OnboardingResponse) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class VPartnerLib : VPartnerLibrary {
  public static var shared: VPartnerLibrary
  public func requiredSetup(clientID: Swift.String, grantID: Swift.String, partnerCode: Swift.String, productCode: Swift.String, appIconName: Swift.String? = nil, sponsorIconName: Swift.String? = nil, locale: Swift.String? = nil)
  public func configure(designConfig: ConfigurationsDesign = ConfigurationsDesign.defaultDesignConfiguration)
  public func logoutUserFromIDTM(completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func buildManageSubscriptionsViewController() -> UIKit.UIViewController
  public func buildAddDeviceViewController(productID: Swift.String, completion: @escaping OnboardingCompletionHandler) -> UIKit.UIViewController
  public func buildAddDeviceViewController(completion: @escaping OnboardingCompletionHandler) -> UIKit.UIViewController
  @objc deinit
}
@_hasMissingDesignatedInitializers public class X509Certificate {
  public static func notAfterDate(of certificateData: Foundation.NSData) -> Foundation.Date?
  @objc deinit
}
public struct ConfigurationsDesign : Swift.Codable, Swift.Equatable {
  public static var defaultDesignConfiguration: ConfigurationsDesign
  public let theme: Theme?
  public let screens: Screens?
  public init(theme: Theme? = nil, screens: Screens? = nil)
  public static func == (lhs: ConfigurationsDesign, rhs: ConfigurationsDesign) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Theme : Swift.Codable, Swift.Equatable {
  public var backgroundColor: Swift.String?
  public var primaryButtonColorEnabled: Swift.String?
  public var primaryButtonColorDisabled: Swift.String?
  public var secondaryButtonColorEnabled: Swift.String?
  public var secondaryButtonColorDisabled: Swift.String?
  public var navigationBarTitleTextColor: Swift.String?
  public init(backgroundColor: Swift.String? = "#ffffff", primaryButtonColorEnabled: Swift.String? = "#000000", primaryButtonColorDisabled: Swift.String? = "#555555", secondaryButtonColorEnabled: Swift.String? = "#ffffff", secondaryButtonColorDisabled: Swift.String? = "#555555", navigationBarTitleColor: Swift.String? = "#000000")
  public static func == (a: Theme, b: Theme) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Screens : Swift.Codable, Swift.Equatable {
  public static func == (a: Screens, b: Screens) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension OnboardingResponse : Swift.Equatable {}
extension OnboardingResponse : Swift.Hashable {}
